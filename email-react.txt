(168) How to send emails using Next.js App Router and Server Actions - YouTube
https://www.youtube.com/watch?v=UqQxfpTQBaE

Transcript:
(00:00) In this video, I'm going to show you how to send an email using the app router and server actions. Let's get into it. Okay, so the first thing we're going to do is send an email using the app router. I already have a project structure here uh with the latest versions of next and react. And I also created a API route uh that if I call this endpoint I will just return a JSON saying hello world.
(00:38) So let's do that. Let's run this locally and see if that works. So I'm going to localhost 3000. I get the four page because I don't have anything that's expected. And if I go to slash API/ send, I get my hello world. So that's great. Uh this is all we need to get started. I'm going to install the recent package.
(01:07) And once I have the recent package, I can already start sending emails. So I'm going to import this package now. And what I'm going to do is just, you know, create a new instance of that. And I'm going to need an API key. So I'll put that inside an environment variable. Um, but we need to define that variable now.
(01:43) So let's head over to recent and we're going to navigate to API keys. going to create one called X14. And don't worry, I'm going to delete this API key right after the video. And I'm going to just add a new M file. And I'm going to declare that environment variable. So this is all I need to instantiate resend. And the the next thing we're going to do is, you know, just send an email.
(02:24) So, we have this await resend emails. And there are a couple parameters that we can use here. The from address, this can be anything we want. I'm I'm going to call it like nextdomain.com. I'm going to send this over to my work email. The subject, okay, this is great. And the HTML is going to be like H1 hello from NexJS. And what I'm going to do is I want to return whatever comes out of this, which should be an ID of the email that was sent.
(03:09) So let's see if this is going to work now. Okay, let's go to that same endpoint. And there you go. Boom. The email was sent. I got an ID. So now I can go to my Gmail and the email is here. Hello from Nex.js. And that's great. We have an email. But how can we make this email better? How can we use something that feels more real? And email is tricky, right? Like you need to use tables and archaic HTML.
(03:51) So that's why we created React email. So when you go there, there are a lot of examples that you can just, you know, uh, get started with. And the one I'm going to use is the, let's see, the GitHub one. So I'm just going to copy this whole thing. And all I need to do is create a new folder here called components.
(04:20) And I'm just going to paste this whole thing here. So there you go. Uh you'll notice that we have a couple things here. One of them is the React email components dependency that we need to install. So let's do that. And the other thing is this base URL here. This is just like the path for the images. So let me just make sure this is not going to break by defining the right path here which is basically like this demo app here.
(05:04) So we have the base URL, we have React email components installed and all I can do is just import that whole email template which is called GitHub access token email and I can now use that template and because recent and react email you know are built by the same team. We have like a few nice things you can do like just import like using the react component and I can even you know use the different you know things here like just change the username uh and pass variables to this component and this is all you know powered by TypeScript and
(05:59) we can ensure that our types are going to work well here. So, I'm going to run this now and let's see what happens. Boom. The email was sent. We can go to Gmail and let's see what's going to show up over here. There you go. Here's my email that I just sent. And this is using React email behind the scenes.
(06:36) And I can build my whole template using React instead of archaic HTML. That's beautiful. I love it. Now, let's see how to send an email using server actions. If you're not familiar with server actions, this is a new paradigm in Nex.js GS which allows you to run server code without having a separate API endpoint that you call from your client.
(07:05) You can have both your server code and your client code in the same place. So let's see how that works. So before you had to create this API endpoint that you would then call it and run this function on the server and that's required because you don't want to leak your resend API key for example. So it's really important that this lives on the server and not on the client.
(07:32) But things are a little bit different now with server actions. Let's see how that will work. So, I'm going to go ahead and create an index page here for us. And inside this page, what I'm going to do is just um return a form, which will then have a submit button. And over here, all this is going to do just send an email.
(08:07) Once I click this button, I want it to send an email. So, I'm already running the server lo locally here. And here we go. This is how the app looks like. I have my send email button right here. Cool. So, now what I'm going to do is Oh, thanks Nex for creating the layout file already. And now I can start adding my server action function.
(08:36) I'm going to create a function called send. And all this is going to do first is just do a console.log saying hello world. And to call this function, I'm going to specify it here on my action parameter. And to be able to run this function on the server, all I have to do is just define this annotation here called use server.
(09:11) So I'm going to run this and let's see what happens. I have my next server running. And if I click this button here, we're not going to see anything on my browser dev tools because that console.log is not running on the client. That's only running on the server. And that's why we see it here. And that's the beauty of server actions.
(09:39) So we can now just you know pretty much copy that same code we wrote before for our email and we can add it here. So we can bring all these things here like the recent API key which is private and shouldn't be accessible on the client side. We can bring you know our template um which we're going to import here and we can also just import resend and then do a console.
(10:19) log on the response here. So if I call this, if I submit this form, um, now what's going to do is it's going to send an email on the server. It returned the ID of that email for me. And if I go to um, Gmail now, and here's the email. So I hope this was helpful to understand a little bit more about the differences between the app router and server actions. And yeah, see you next time.
(10:50) Bye.

(168) You Can Create Beautiful Modern Emails With React! - YouTube
https://www.youtube.com/watch?v=pHXHBHdTzrM

Transcript:
(00:01) foreign hi how you doing sorry I just wrote my first HTML email template my hands are bleeding one of the most frustrating things in web development has to be creating email templates oh my gosh I'm trying to avoid it at all cost uh not only you have all of these different email client providers like Gmail and AOL and MSN and whoever or whatnot you're gonna get inconsistencies when it comes in terms of uh styling so if you apply a certain style and you view it on Gmail it might be totally different than on AOL which is quite annoying not only
(00:37) that you cannot use all the CSS features that you'd want to and that you love so flexbox CSS grid now you can throw that out the window so I was searching for a solution I really wanted to find a solid one something modern and I think I did it's called react email and what it allows you to do is just create a simple react component and you can also style it up with cs Tailwind CSS and boom that's that's your email template right they are ready to go so I want to quickly show you how you can set this up it still looks like it's an early stages
(01:10) so it's a bit buggy but I still want to show you because it's super cool so let's get into it okay so here it is react email let's get going so here are some examples that you can see if you head over to their examples page and look at that look how cool they are you have notion example you have a slack confirmation uh a stripe as well we're gonna make our own simple custom ones but if you want to view it you can view it right here and they have the source as well so that's awesome okay so let's get the sucker installed so open up anywhere and
(01:46) run this command MPX create email at latest and guess what uh this version has some bugs it won't work so we're gonna need to downgrade but that's fine so this project that we're using specifically is to just create the email just have the basic email up and go when I'm ready and then we can copy this over to our next project and I'll show you how we can set that up as well so let's head back here and now that we have this done we can just CD into it and I think it's going to set up one called react starter emails try to CD into that oh it's
(02:23) called react email starter okay so after we run the MPX create email at latest command we're gonna CD into react email starter I'm just gonna pop it open here with code period like that cool so that's what we have and all we need to do here is run npmi which is going to install uh all the necessary packages this project specifically is set up because I was looking at it is it looks like it's just fully installing the whole project so that's the reason why we didn't just install it in next.
(02:57) js is because it's waving a whole by itself all right so we're just gonna basically copy the email over here that we create and move it over to our next project all right so after we run npm run I um what we need to do is run npm run Dev cool so this is gonna set up oh this is not gonna work cancel cancel uh we're gonna need to downgrade I don't know why version 1.9.
(03:24) 3 is not working but what we can do is say npmi until this gets fixed by the way uh react email at 1.9.0 so this works uh if you want to keep up with the GitHub repo feel free I'll leave a link in the description as well all right so we got that back reverted to 1.9 we can run npm run Dev now cool so when you run npm run Dev it's essentially gonna create a whole new project here for you.
(03:54) react email as you can see it's gonna try to import these uh react components that were made here as a like an example and also these static images are going to be moved in here yeah so the new version essentially it breaks it doesn't import the emails in the in the final version of the project for some reason I don't know why portrait 3000 is already in use so let me also cancel that really quickly and then I'm gonna run the command again so npm run Dev and that should be all nice and fine all right so whilst that's loading up there we go awesome we can
(04:29) just click on one of these and select like a a base template if we want to so if you like this just go on this and re-customize it if you want and we can check it out here if we head over to email so if I want to go on notion and see kind of what's going on uh then yeah I can just head over here to where is it notion there we go cool I can also pop this here so we can see it nice and easily okay so we have this example here but we're just gonna get rid of everything and we're gonna make our own so just get rid of everything and we're gonna import
(05:04) react that's the first package and then we are also gonna import a couple of things from um react email components we'll do body we'll do the HTML tag right and then a container which is gonna help us Center stuff we're gonna import Tailwind which is gonna let us add Tailwind classes a text a button an image what else would you like are you happy with that you will board here's a heading okay cool all right so we got all of that stuff imported and then now we can just make it simple component like that and here we'll return whatever we want
(05:43) to return and then we'll export at the bottom as we usually do and here we can just do HTML like that all right so we're using these components rather than writing a H1 like that or a div tag or HTML tag like that all right so we have our HTML tag and now here we can add a head tag as well if you don't believe we have imported so let's do that as well head cool and then here I'll just add the Tailwind class like that and in here we finally have our body so if I want to render out some text I can just say hey there and
(06:24) hit save all right cool so that should hopefully hopefully work let's do refresh I don't see any text yet but it's not erroring out which is fantastic okay so I think it is rendering out I think we just cannot see it because it's on dark so let's just go to the body and start adding some styling let's say class name and again I can just do BG white now and that works fine and there we go we have hey there awesome so I can add a margin y of 12 if I want to like that I can do MX Auto as well uh there we go and let's see what other
(07:02) styles we should add we can do a font of sans as well nice lovely so that's the body perfect all the styling done there and next up let's add a container because the container is going to help us pretty much Center everything so let's do the text in here actually text now let me just add a bit more styling to it so I basically have this let me show you I added a heading like that see it's a text of excel4 with a ptf4 that just says hello there and then I have another text I just made the text large and added a font of gray to it
(07:48) color of gray and just some text all right so that's looking good and now on this container I can just go here and add a class name like that and I'll do an MX Auto like that cool oops sorry I meant a padding of eight like that and a rounded of LG because I also want to add a shadow of large to this like that look that looks pretty cool uh oh up here at the top I also wanted to add an MX of R2 cool all right and look that's the way it looks that looks pretty good now if you want to do let's do a button down here so button
(08:37) and I can add a href to this if I want to so if I want to send them over to https slash slash developed by ed.com I can easily do that and then I can just say here check out the courses like that and hit save all right and now I can add some Styles let's make this purple for example PG purple 700 we'll do a text of white and a font of bold boom and then we can do some padding so let's do that maybe two three four we can also have the rounded to it like that maybe that's a bit too small we can do four there six
(09:21) there so that's a basic one right there done and what like a couple of minutes um we can also go here let me just add an image for the Simplicity Simplicity the easiest way I found to do it is just add the image tank like that and you cannot import uh if you try to like add it in your static uh folder here I think they're doing it here actually let's check um so they're basically checking uh where where it is right with the base URL so if it's on localhost or if it's um for sale or something um but here as you can see we're just
(10:04) checking the folder here but that's not going to work in xjs unfortunately so what you can do is like I just want to use my logo maybe or something so I can just get that from from Google to be honest and then right click and get the source of that because that's coming from Google and that's reliable perfect so let's just paste that up here at the top so I can go over here and say SRC is gonna head over to that Google image right there awesome let's make some space here and then I can say class name on this one should be
(10:40) an MX of Auto so pop it over to the middle and I'll change the width to something like 24 really small like that cool so that's nice that's you can mess around more with the paddings and stuff like that but that's generally the idea behind it so now we don't actually need this anymore so you you can essentially copy this whole thing over so if you go to copy and I just popped a next app over here and I'll show you how you can set that up so here in my next JS I essentially made so we have an app here right I made an emails folder in here and I
(11:18) just popped everything I had in here so import react from react everything that we had right same same thing it's just a copy paste perfect and the packages that I've installed is yeah react email components that's actually all you need you don't even need the other package as well when you're actually working in here cool so now that you have this what you can do in your API routes here uh I'm importing next response I'm importing the actual component and I'm also installing a package called resent so run npmi recent and the good thing
(11:59) about this is that they are also working on resend so it's the same theme behind react email so if we check out recent what you can do is essentially sign up to their uh website here you can use something else as well if you want to like you're not limited by this they support quite a couple of things node mailers and grid postmark mailers and but I'll just show you this one because it works so easily because it's the same maintainers so if you go over to resend.
(12:33) com and sign up you'll be able to send 100 emails for free and then it's you got into the paid tier wow which yeah whatever we don't really care about it but you can actually just yeah go here and then generate an API key as well and then you can just copy that over and I pasted it basically in my local EMV here right there we go don't steal it well you're only gonna get like 50 emails because I used it a couple of times but anyway so after you register you save that and your EMV local and then you npm I resend as well [Music]
(13:15) I already did it but whatever cool and then if we run npm run Dev so what you can do is just set the from here to onboarding a recent.dev this is what they recommend unless you hook up your own domain to it which you can also do and then you can just do whatever you want contact at developed by ed.com and where I want to send it to you so I'm just going to send it to this old email address I have and then the subject that you want to use and here you can just pass down react like that and you can pass down the actual component that you
(13:49) want to send through like that so that's super cool isn't it and the cool thing is you do you want to pass down any props just add some curly brackets and you can pass down props as well so if you got something from the body here you can do cons body equals request dot Json right you can just fetch that request oops so you'd have something like this going on right you have a request and this is a next request like that cool so you can read that and then you can pass down any props down here if you want into this component as
(14:26) well and then here you can extract title or maybe you have a name or something and you can say hello there uh Jonathan it Jonathan okay anyway so that's it so you just pass react and welcome and now if we try to hit the end points so we have to go over to localhost 3000 slash API slash and we named it welcome I hit enter God damn it that doesn't work oh three thousand four three thousand one okay because I have both of them running uh Slash sell this come on man slash API slash welcome right so that should send an email through
(15:12) there we go boom there you go easy peasy and then it works so yeah so how much did that took I mean it took a couple of minutes to just kind of see how it is all set up so there we go I'm really excited for this one um if they could come up with just like a simple hook that you could import and use that rather than doing this whole making a new project and then extracting the email and then dropping it in your own next app it'd be nice to just have like a simple hook or like an extension where we can preview the email I'd love
(15:46) that anyway that's gonna be it for me hope you enjoyed this episode hope you learned something new and drop a sub check out the courses I'd really appreciate that and yeah that's gonna be for me today Astro I'm doing the master tutorial that's coming soon like a promising it but in the next couple of days okay bye-bye